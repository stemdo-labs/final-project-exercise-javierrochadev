- name: Backup
  hosts: database_server
  become: true
  vars:
    postgres_user: "postgres"
    postgres_db: "orquestas"
    backup_file: "/var/backups/postgres/backup_{{ ansible_date_time.date }}.sql.gz.enc"
    encryption_key: "G7x!#aB12$vf@kT"
    local_backup_dir: "./backups/"
    
    azure_client_id: "${{ secrets.ARM_CLIENT_ID }}"
    azure_client_secret: "${{ secrets.ARM_CLIENT_SECRET }}"
    azure_subscription_id: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
    azure_tenant_id: "${{ secrets.ARM_TENANT_ID }}"
    public_ip: "${{ secrets.PUBLIC_IP }}"
    db_name: "${{ secrets.DB_NAME }}"
    db_user: "${{ secrets.DB_USER }}"
    db_password: "${{ secrets.DB_PASSWORD }}"
    backup_dir: "${{ secrets.BACKUP_DIR }}"

    RESOURCE_GROUP_NAME: "${{ secrets.RESOURCE_GROUP_NAME }}"
    STORAGE_ACCOUNT_NAME: "${{ secrets.STORAGE_ACCOUNT_NAME }}"
    CONTAINER_BACKUP_NAME: "${{ secrets.CONTAINER_BACKUP_NAME }}"
 
  tasks:
    - name: Crear el directorio de backups si no existe
      file:
        path: "/var/backups/postgres"
        state: directory
        mode: '0777'
 
    - name: Dump y cifrar la base de datos PostgreSQL
      shell: |
        pg_dump -U {{ postgres_user }} {{ postgres_db }} | gzip | openssl enc -aes-256-cbc -salt -out {{ backup_file }} -k "{{ encryption_key }}"
      environment:
        PGPASSWORD: "{{ db_password }}"
      register: backup_result
 
    - name: Verificar si el dump y cifrado fue exitoso
      debug:
        msg: "Backup creado correctamente en {{ backup_file }}"
      when: backup_result.rc == 0

    - name: Crear directorio local para backups si no existe
      local_action:
        module: file
        path: "{{ local_backup_dir }}"
        state: directory
        mode: '0777'

    - name: Copiar el archivo de backup a la m√°quina local
      fetch:
        src: "{{ backup_file }}"
        dest: "{{ local_backup_dir }}/"
        flat: yes

    - name: Subir archivo al contenedor de Azure
      azure.azcollection.azure_rm_storageblob:
        resource_group: "{{ RESOURCE_GROUP_NAME }}"
        storage_account_name: "{{ STORAGE_ACCOUNT_NAME }}"  
        container_name: "{{ CONTAINER_BACKUP_NAME }}"        
        blob_name: "backup_{{ ansible_date_time.date }}.sql.gz.enc"            
        file_path: "{{ backup_file }}"        
        blob_type: "Block"
        client_id: "{{ azure_client_id }}"
        secret: "{{ azure_client_secret }}"
        subscription_id: "{{ azure_subscription_id }}"
        tenant: "{{ azure_tenant_id }}"
      register: result_blob
