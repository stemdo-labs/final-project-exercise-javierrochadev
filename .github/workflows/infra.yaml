name: Setup Terraform and Azure CLI

on:
  workflow_dispatch:
    # Puedes descomentar `pull_request` o `push` según tus necesidades
    # pull_request:
    #   branches:
    #     - main
    # push:
    #   branches:
    #     - main

permissions:
  pull-requests: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # 1. Checkout del código del repositorio
      - name: Checkout code
        uses: actions/checkout@v3
        
      # 2. Instalacion de azure cli
      
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # 3. login 

      - name: Azure Login
        run: |
          echo "Logging in to Azure..."
          az login --service-principal \
            --username ${{ secrets.ARM_CLIENT_ID }} \
            --password ${{ secrets.ARM_CLIENT_SECRET }} \
            --tenant ${{ secrets.ARM_TENANT_ID }}

      # 2. Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      # 3. Terraform Init
      - name: Terraform Init
        run: |
          terraform init
        working-directory: ./terraform/

      # 4. Terraform Plan
      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform/
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      # 5. Set PR Body (opcional)
      - name: Set PR body
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const planOutput = `\`\`\`\n${{ steps.terraform_plan.outputs.stdout || 'No output available' }}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Result:\n${planOutput}`
            });

      # 6. Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./soluciones/modules
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        if: ${{ github.event_name == 'push' }}

      # 7. Ir a ver infraestructura en Azure
      #- name: Wait for infrastructure to stabilize
      # run: sleep 20

      # 8. (Opcional) Terraform Destroy
      # Descomentar si deseas destruir la infraestructura después
      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: ./soluciones/modules
      #   env:
      #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      #   if: ${{ steps.terraform_apply.conclusion != 'success' }}
