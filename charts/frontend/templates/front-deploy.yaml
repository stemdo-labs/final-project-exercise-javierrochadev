apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-frontend-app"
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-frontend-app"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-frontend-app"
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
      - name: "{{ .Release.Name }}-frontend-app"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
        volumeMounts:
        - name: tls-secret-volume
          mountPath: /etc/ssl/certs
          readOnly: true  
      volumes:  # Este bloque debe estar a nivel del spec, fuera de los containers
      - name: tls-secret-volume
        secret:
          secretName: tls-secret

      containers:
      - name: myapp
        image: nginx
        volumeMounts:  
          - name: nginx-volume # Nombre que le estamos dando al volumen creado
            mountPath: /usr/share/nginx/html # Ruta donde se va a almacenar el fichero configmap
        ports:
        - containerPort: 80  # Este es el puerto donde NGINX escucha
      volumes:
      - name: nginx-volume # Nombre que le estamos dando al volumen creado
        configMap:
          name: ejercicio13 
